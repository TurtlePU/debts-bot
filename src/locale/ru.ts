import { shieldMarkdown } from '#/util/StringUtils'

const ru: Locale = {
    currency: '‚ÇΩ',
    messageTexts: {
        anon: '–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ –∑–Ω–∞—é, –∫—Ç–æ —Ç—ã.',
        hi: name =>
            `–ü—Ä–∏–≤–µ—Ç, ${shieldMarkdown(name)}!\n` +
            '*i*. –ù–∞–ø–∏—à–∏ /balance, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n' +
            '*ii*. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –±–µ—Å–µ–¥–µ —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥,'
            + ' –∏ —è –æ—Ñ–æ—Ä–º–ª—é –Ω–æ–≤—ã–π –¥–æ–ª–≥.\n' +
            '*iii*. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–π!\n' +
            '\n' +
            '*–í–∞–∂–Ω–æ!* inline-—Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö –¥–æ–ª–≥–æ–≤, –≤ –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.',
        debts(debts) {
            const plus = debts.filter(({ amount }) => amount > 0)
            const mins = debts.filter(({ amount }) => amount < 0)
            if (plus.length || mins.length) {
                return (
                    (plus.length ? '–í–∞–º –¥–æ–ª–∂–Ω—ã:\n' + plus.map(toStringAbs).reduce(concat) : '') +
                    (plus.length && mins.length ? '\n\n' : '') +
                    (mins.length ? '–í—ã –¥–æ–ª–∂–Ω—ã:\n' + mins.map(toStringAbs).reduce(concat) : '')
                )
            } else {
                return '–î–æ–ª–≥–æ–≤ –Ω–µ—Ç!'
            }
        },
        toUpdate:
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–∏—Ç—Å—è...',
        wrongChatForDebt:
            '–ó–¥–µ—Å—å –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–ª–≥–∏!\n' +
            '–ù–∞–ø–∏—à–∏ –º–Ω–µ –ª–∏–±–æ –≤ inline-—Ä–µ–∂–∏–º–µ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ –¥–æ–ª–≥–∞, –ª–∏–±–æ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ.',
        group: {
            hi: '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n' +
                '\n' +
                '*i*. –ù–∞–ø–∏—à–∏—Ç–µ /members, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n' +
                '*ii*. –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É / –ø—Ä–∏—á–∏–Ω—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞.\n' +
                '*iii*. –ù–∞–ø–∏—à–∏—Ç–µ /balance, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.',
            notGroup:
                '–ú—ã –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å.',
            members: names =>
                names.length
                    ? '*–£—á–∞—Å—Ç–Ω–∏–∫–∏*:\n\n' + names.map(noMention).reduce(concat)
                    : '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç :(',
            balances(balances) {
                const sorted = [ ...balances ].sort(debtCompare)
                return sorted
                    .map(({ to, ...tail }) => ({ to: noMention(to), ...tail }))
                    .map((balance, i) =>
                        (sorted[i - 1]?.currency != balance.currency ? '\n' : '')
                        + toString(balance))
                    .reduce(concat, '*–ë–∞–ª–∞–Ω—Å—ã*:')
            },
            offer: (amount, currency, from, to) =>
                `*–°—É–º–º–∞ –¥–æ–ª–≥–∞*: ${amount} ${shieldMarkdown(currency)}.\n` +
                (from.length ? '\n*–ö—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª*:\n' + from.map(noMention).reduce(concat) : '') +
                (from.length && to.length ? '\n' : '') +
                (to.length ? '\n*–ó–∞ –∫–æ–≥–æ –ø–ª–∞—Ç–∏–ª–∏*:\n' + to.map(noMention).reduce(concat) : ''),
            offerSaved: (updates, amount, currency) =>
                `*–°—É–º–º–∞ –¥–æ–ª–≥–∞*: ${amount} ${shieldMarkdown(currency)}.\n\n` +
                updates
                    .sort(({ delta: a }, { delta: b }) => a - b)
                    .map(({ username, delta }) => `${noMention(username)}: ${delta}`)
                    .reduce(concat)
        },
        offerSaved(from_name, to_name, amnt, currency) {
            const [ from, to, amount ] = amnt > 0
                ? [ from_name, to_name, amnt ]
                : [ to_name, from_name, -amnt ]
            const [ shFrom, shCur, shTo ] = [ from, currency, to ].map(shieldMarkdown)
            return `${shFrom} –¥–∞–ª ${amount} ${shCur} ${shTo}.`
        },
        settledUp: (first, second) =>
            `–î–æ–ª–≥–∏ –º–µ–∂–¥—É ${shieldMarkdown(first)} –∏ ${shieldMarkdown(second)} –æ–±–Ω—É–ª–µ–Ω—ã.`
    },
    hybrid: {
        offer: {
            expired: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.',
            declined: by => `–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ${shieldMarkdown(by)}.`
        }
    },
    buttons: {
        accept: '–û–∫ üëç',
        reject: '–ù–µ üëé',
        join: 'Let me in!',
        updateMembers: '–û–±–Ω–æ–≤–∏—Ç—å',
        joinPayers: '–Ø –ø–ª–∞—Ç–∏–ª',
        leavePayers: '–Ø –Ω–µ –ø–ª–∞—Ç–∏–ª',
        joinMembers: '–ó–∞ –º–µ–Ω—è –ø–ª–∞—Ç–∏–ª–∏',
        leaveMembers: '–ó–∞ –º–µ–Ω—è –Ω–µ –ø–ª–∞—Ç–∏–ª–∏',
        lockOffer: '–ó–∞–≤–µ—Ä—à–∏—Ç—å',
        cancelOffer: '–û—Ç–º–µ–Ω–∏—Ç—å'
    },
    articles: {
        offer: (amount: number, currency: string) => {
            const abs = Math.abs(amount)
            const shielded = shieldMarkdown(currency)
            const title = amount > 0 ? `–î–∞—Ç—å ${abs} ${currency}` : `–í–∑—è—Ç—å ${abs} ${currency}`
            const text = amount > 0 ? `–Ø –¥–∞–ª ${abs} ${shielded}.` : `–Ø –≤–∑—è–ª ${abs} ${shielded}.`
            return { title, text }
        },
        settleUp: {
            title: '–û–±–Ω—É–ª–∏—Ç—å –¥–æ–ª–≥–∏',
            text: '–û–±–Ω—É–ª–∏–º –¥–æ–ª–≥–∏?'
        }
    },
    response: {
        membersUpdated: '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.',
        joinSuccess: '–û\'–∫–µ–π, —Ç—ã –≤–∫–ª—é—á–µ–Ω',
        selfAccept: '–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ—ë –∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!',
        offerCanceled: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
    }
}

export default ru

function noMention(username: string): string {
    return shieldMarkdown(username[0] == '@' ? username.substr(1) : username)
}

function toString({ to, amount, currency }: Locale.Debt): string {
    return to + ': ' + amount + ' ' + currency
}

function toStringAbs({ to, amount, currency }: Locale.Debt): string {
    return toString({ to, amount: Math.abs(amount), currency })
}

function concat(a: string, b: string) {
    return a + '\n' + b
}

function debtCompare(
        { currency: a0, amount: a1, to: a2 }: Locale.Debt,
        { currency: b0, amount: b1, to: b2 }: Locale.Debt
) {
    /* eslint-disable @typescript-eslint/indent */
    return (
        a0 != b0 ? a0.localeCompare(b0) :
        a1 != b1 ? a1 - b1 :
        a2 != b2 ? a2.localeCompare(b2) : 0
    )
    /* eslint-enable @typescript-eslint/indent */
}
